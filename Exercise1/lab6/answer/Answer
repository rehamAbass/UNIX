///--------------------------------------------------------------------------------------------------------------------------------------------------------
///--------------------------------------------------------------------------------------------------------------------------------------------------------
//	Lab 6 - realTime - XINU
//	written by :  Biata geilikberg []   & Reham Abass []
///--------------------------------------------------------------------------------------------------------------------------------------------------------
//	Libraries :
///--------------------------------------------------------------------------------------------------------------------------------------------------------
#include <dos.h>
#include <conf.h>
#include <kernel.h>
#include <math.h>
#include <sem.h>
#include <proc.h>
#include <q.h>
///--------------------------------------------------------------------------------------------------------------------------------------------------------
int compute_factors(unsigned long int arr[],unsigned long int n);					
int isPrime(unsigned long int x);		//function check if number is prime or not
///--------------------------------------------------------------------------------------------------------------------------------------------------------
///		global Variables and semaphores :
///--------------------------------------------------------------------------------------------------------------------------------------------------------

int finished,mutex_n;					//semaphores
int totFact=0,index=0;					//index for the use of the big array -fact1[]
void search1() , search2() , search3();	//function for each process
int  total1=0 ,  total2=0 , total3=0;	//total counter for each array
long double sqrtn;						//sqrt of the global n
unsigned long int fact1[32]={0},global_n=0;	//global big array , global n for the use of the procceses
unsigned long int array1[32]={0} , array2[32]={0} , array3[32]={0};//array for each proccess
char str[80];							//string to save the numbers
char str1[80];							//to save each number in string way
///--------------------------------------------------------------------------------------------------------------------------------------------------------
///		xmain - the main function :
///--------------------------------------------------------------------------------------------------------------------------------------------------------
xmain(){
int top, top1, top2, i;
  unsigned long int n;
  printf("Enter unsigned long integer:\n");
  scanf("%lu", &n);
  top =  compute_factors(fact1,n);
  if (top == 1){
    sprintf(str, "%lu is a prime.\n", n);
    printf(str);
  } 
  else{
    sprintf(str,"%lu is not a prime, its factors:\n", n);
    printf(str);
    printf("%d factors:\n", top);
    strcpy(str,"");
    for(i=0; i < top; i++) {
     		 sprintf(str1, "%lu \n", fact1[i]);
      	 strcat(str, str1);
     } 
     
    printf(str);
  } // else
}
///--------------------------------------------------------------------------------------------------------------------------------------------------------
//		creates one process which gonna create the others processes 
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
compute_factors(unsigned long int arr[],unsigned long int n){   
 	
 	 int index1 , index2, index3 ;
	 global_n=n;  
	 ////count  how many times the n is diveded by 2
   	 while(global_n%2==0){
		global_n=global_n/2;
		totFact++;
		fact1[index++]=2;
	}
	finished =screate(0);
	mutex_n=screate(1);
	sqrtn = sqrtl((long double)global_n);
	
	resume(create(search1,INITSTK,INITPRIO,"search1",0));	//create proccess one 
	resume(create(search2,INITSTK,INITPRIO,"search2",0));	//create proccess two
	resume(create(search3,INITSTK,INITPRIO,"search3",0));	//create proccess three 

	//update the big array	
	wait(finished);
	wait(finished);
	wait(finished);
	for(index1=0; index1 < total1 ; index1++){		//copy the first array tothe fact1
		fact1[index++] = array1[index1];				//increase the global index
	}
	for(index2=0 ; index2 < total2 ; index2++){		//copy the second array to the fact1
		fact1[index++ ] = array2[ index2];				//increase the global index
	}
		for( index3=0 ; index3 < total3 ; index3++){	//copy the thirs  array to the fact1
		fact1[index++] = array3[ index3];				//increase the global index
	}
	arr =fact1;
	//resume(create(Proc,INITSTK,21,"prod",0));	//creating the first process 
	return index;//totfac							//return number of factors
}
///--------------------------------------------------------------------------------------------------------------------------------------------------------
//		search in 3,9,15,21,,...
///--------------------------------------------------------------------------------------------------------------------------------------------------------
void search1()
{
	unsigned long int i=3;
	
	while(sqrtn>1)
	{
		
		wait(mutex_n);
		while((global_n%i)==0){
			if( isPrime(i)==1){//		check if the index is prime
		  	array1 [total1++]=i;
		 	 totFact++;
       		global_n  /=  i;	
		}
		}
	    sqrtn = sqrtl((long double)global_n);   
		i  += 6;
		
		signal(mutex_n);	
	}
	signal(finished);
}
///--------------------------------------------------------------------------------------------------------------------------------------------------------
//			searching 5,11,17...
///--------------------------------------------------------------------------------------------------------------------------------------------------------
void search2()
{
 unsigned long int i=5;
  
	while(sqrtn>1)
	{

		wait(mutex_n);
		while((global_n%i)==0){
			if( isPrime(i)==1){//		check if the index is prime
			 array2 [total2++]=i;
			  totFact++;
        		  global_n  /= i;	
		}
		}
	    sqrtn = sqrtl((long double)global_n);   
		i += 6;
		
		signal(mutex_n);	
	}
signal(finished);
}
///--------------------------------------------------------------------------------------------------------------------------------------------------------
/// 				search in  7,13,19...
///--------------------------------------------------------------------------------------------------------------------------------------------------------
void search3()
{
 unsigned long int i=7;
  
	while(sqrtn>1)
	{	
		wait(mutex_n);
		while((global_n%i)==0){
		if( isPrime(i)==1){//		check if the index is prime
			 array3 [total3 ++ ] = i ;
		 	 totFact++;
          		global_n  /=  i ;	
		}
		}
	    sqrtn = sqrtl((long double)global_n);   
		i += 6;
		
		signal(mutex_n);	
	}
signal(finished);
}
///--------------------------------------------------------------------------------------------------------------------------------------------------------
//		check if the index is prime
//---------------------------------------------------------------------------------------------------------------------------------------------------
int isPrime(unsigned long int x){
	unsigned long int i;
	if(x%2 ==0) return 0;
	for(i=3 ; i < x ; i+=2){
		if(x%i == 0) return 0;
		}
		return 1;	
}
 //---------------------------------------------------------------------------------------------------------------------------------------------------

 //---------------------------------------------------------------------------------------------------------------------------------------------------
